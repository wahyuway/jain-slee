<?xml version="1.0"?>
<project name="restcomm.release" default="release-wildfly" basedir=".">

	<property environment="sys" />

	<property name="release.version" value="7.2.0" />
	<property name="release.profile" value="restcomm" />
	<property name="validate.versions" value="" />
	<property name="wildfly.config" value="standalone" />

	<property name="output.dir" value="${basedir}/target" />
	<property name="release.dir" value="${output.dir}/binary" />
	<property name="packages.dir" value="${basedir}/checkout" />
	<property name="tmp.wildfly.home" value="${output.dir}/tmp" />

	<property name="wildfly.version" value="26.1.2.Final" />
	<property name="wildfly.distro.zip.path" value="wildfly-${wildfly.version}.zip" />
	<property name="wildfly.home.relative.path" value="wildfly-${wildfly.version}/" />
	<property name="wildfly.home" value="${release.dir}/${wildfly.home.relative.path}/" />

	<available file="${ant.file.restcomm.release}/../${wildfly.distro.zip.path}" property="got.wildfly" />

	<property name="h2.version" value="2.1.214" />
	<property name="h2.distro.jar.path" value="h2-${h2.version}.jar" />
	<available file="${ant.file.restcomm.release}/../${h2.distro.jar.path}" property="got.h2" />

	<property name="github.url" value="http://github.com/RestComm" />
	<property name="mvn.javadoc" value="org.apache.maven.plugins:maven-javadoc-plugin:2.10.4" />

	<!-- Diameter -->
	<!-- https://mobicents.ci.cloudbees.com/view/JSLEE/job/RestComm-jDiameter-1.x/134/artifact/release/restcomm-diameter-mux-wildfly-1.7.0.134.zip -->
	<property name="diameter.build" value="160"/>
	<property name="diameter.version" value="1.7.1-${diameter.build}"/>
	<property name="diameter.zip" value="restcomm-diameter-mux-wildfly-${diameter.version}.zip"/>
	<property name="diameter.download.url"
			  value="${github.url}/jdiameter/releases/download/${diameter.version}/${diameter.zip}" />
	<property name="diameter.distro.zip.path" value="restcomm-diameter.zip" />

	<!-- SS7 -->
	<property name="ss7.build" value="144"/>
	<property name="ss7.version" value="7.4.0-${ss7.build}"/>
	<property name="ss7.zip" value="restcomm-jss7-${ss7.version}.zip"/>
	<property name="ss7.download.url"
			  value="${github.url}/jss7/releases/download/${ss7.version}/${ss7.zip}" />
	<property name="ss7.distro.zip.path" value="restcomm-ss7.zip" />
	
	<!-- SMPP Extensions -->
	<property name="smppext.build" value="137"/>
	<property name="smppext.version" value="7.2.0-${smppext.build}"/>
	<property name="smppext.zip" value="restcomm-smpp-extensions-${smppext.version}.zip"/>
	<property name="smppext.download.url"
			  value="${github.url}/smpp-extensions/releases/download/${smppext.version}/${smppext.zip}" />
	<property name="smppext.distro.zip.path" value="restcomm-smpp-extensions.zip" />

	<taskdef onerror="fail" resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ant.file.restcomm.release}/../ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<path id="xmltask.path">
		<pathelement path="${basedir}/xmltask.jar" />
	</path>
	<taskdef name="xmltask" classpathref="xmltask.path" classname="com.oopsconsultancy.xmltask.ant.XmlTask" />

	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.bat">
		<and>
			<os family="windows" />
			<isset property="sys.M2_HOME" />
            <resourceexists>
                <file file="${sys.M2_HOME}\bin\mvn.bat" />
            </resourceexists>
		</and>
	</condition>

    <!-- Newer Maven (-windows) versions shifted from .bat to .cmd. Accomodate that -->
	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.cmd">
		<and>
			<os family="windows" />
			<isset property="sys.M2_HOME" />
            <resourceexists>
                <file file="${sys.M2_HOME}\bin\mvn.cmd" />
            </resourceexists>
		</and>
	</condition>

	<condition property="mvn.executable" value="mvn.bat">
		<and>
			<os family="windows" />
			<not>
				<isset property="sys.M2_HOME" />
			</not>
		</and>
	</condition>

	<condition property="mvn.executable" value="${sys.M2_HOME}/bin/mvn">
		<and>
			<not>
				<os family="windows" />
			</not>
			<isset property="sys.M2_HOME" />
		</and>
	</condition>

	<condition property="mvn.executable" value="mvn">
		<and>
			<not>
				<os family="windows" />
			</not>
			<not>
				<isset property="sys.M2_HOME" />
			</not>
		</and>
	</condition>

	<target name="build-core" description="">
		<property name="core.profiles" value="deploy-module-wildfly,deploy-configuration-wildfly" />
		<exec failonerror="true" executable="${mvn.executable}" dir="${ant.file.restcomm.release}/../checkout/core">
			<arg line="install -Dmaven.test.skip=true -Drelease.dir=${release.dir} -Djboss.home=${wildfly.home} -Djboss.path=../../${wildfly.home.relative.path} -Prelease,set-git-hash,${core.profiles}" />
		</exec>
		<exec failonerror="true" executable="${mvn.executable}" dir="${ant.file.restcomm.release}/../checkout/core">
			<arg line="${mvn.javadoc}:aggregate -DreportOutputDirectory=${release.dir}/docs/container -DdestDir=javadoc" />
		</exec>
	</target>

	<target name="build-resources" depends="build-jdbc,build-sip,build-http,build-media,build-tftp,build-xcap,build-xmpp,build-diameter,build-ss7,build-smpp,build-statistics,build-javaee">
		<echo message="Build Resources"/>
	</target>

	<target name="build-package" description="builds a SLEE package, use package.name and javadoc.dirs to pass the package singularities">
		<exec failonerror="true" executable="${mvn.executable}" dir="${packages.dir}/${package.name}">
			<!--arg line="install -Drelease.dir=${release.dir} -Djboss.home=${tmp.jboss.home} -Djboss.path=../../${jboss.home.relative.path} -Dnode=${jboss.config} -Prelease,set-git-hash,${release.profile}" /-->
			<arg line="install -Dmaven.test.skip=true -Drelease.dir=${release.dir} -Djboss.home=${tmp.wildfly.home} -Djboss.path=../../${wildfly.home.relative.path} -Prelease,set-git-hash,${release.profile}" />
		</exec>
		<for delimiter="," param="dir.name" list="${javadoc.dirs}">
			<sequential>
				<exec failonerror="true" executable="${mvn.executable}" dir="${packages.dir}/${package.name}/@{dir.name}">
					<arg line="${mvn.javadoc}:aggregate -DreportOutputDirectory=${release.dir}/docs/@{dir.name} -DdestDir=javadoc" />
				</exec>
			</sequential>
		</for>
	</target>

	<target name="build-extra-package" description="builds a SLEE package, use package.name and javadoc.dirs to pass the package singularities">
		<exec failonerror="true" executable="${mvn.executable}" dir="${packages.dir}/${package.name}">
			<!--arg line="install -Drelease.dir=${release.dir} -Djboss.home=${tmp.jboss.home} -Djboss.path=../../${jboss.home.relative.path} -Dnode=${jboss.config} -Prelease,set-git-hash,${release.profile}" /-->
			<arg line="install -Dmaven.test.skip=true -Drelease.dir=${release.dir} -Djboss.home=${tmp.wildfly.home} -Djboss.path=../../${wildfly.home.relative.path} -Pdu-wildfly,release-wildfly,set-git-hash,${release.profile}" />
		</exec>
		<for delimiter="," param="dir.name" list="${javadoc.dirs}">
			<sequential>
				<exec failonerror="true" executable="${mvn.executable}" dir="${packages.dir}/${package.name}/@{dir.name}">
					<arg line="${mvn.javadoc}:aggregate -DreportOutputDirectory=${release.dir}/docs/@{dir.name} -DdestDir=javadoc" />
				</exec>
			</sequential>
		</for>
	</target>

	<target name="build-jdbc" description="">
		<antcall target="build-package">
			<param name="package.name" value="jdbc" />
			<param name="javadoc.dirs" value="resources/jdbc" />
		</antcall>
	</target>

	<target name="build-sip" description="">
		<antcall target="build-package">
			<param name="package.name" value="sip" />
			<param name="javadoc.dirs" value="resources/sip11,enablers/sip-publication-client,enablers/sip-subscription-client" />
		</antcall>
	</target>

	<target name="build-http" description="">
		<antcall target="build-package">
			<param name="package.name" value="http" />
			<param name="javadoc.dirs" value="resources/http-servlet,resources/http-client,resources/http-client-nio,enablers/rest-client" />
		</antcall>
	</target>

	<target name="build-media" description="">
		<antcall target="build-package">
			<param name="package.name" value="media" />
			<param name="javadoc.dirs" value="resources/mgcp,resources/mscontrol" />
		</antcall>
	</target>

	<target name="build-tftp" description="">
		<antcall target="build-package">
			<param name="package.name" value="tftp" />
			<param name="javadoc.dirs" value="resources/tftp-server" />
		</antcall>
	</target>

	<target name="build-xcap" description="">
		<antcall target="build-package">
			<param name="package.name" value="xcap" />
			<param name="javadoc.dirs" value="resources/xcap-client,enablers/xdm-client" />
		</antcall>
	</target>

	<target name="build-xmpp" description="">
		<antcall target="build-package">
			<param name="package.name" value="xmpp" />
			<param name="javadoc.dirs" value="resources/xmpp" />
		</antcall>
	</target>

	<target name="build-diameter" description="">
		<antcall target="build-extra-package">
			<param name="package.name" value="diameter" />
			<param name="javadoc.dirs" value="resources/diameter-base,resources/diameter-cca,resources/diameter-cx-dx,resources/diameter-gq,resources/diameter-gx,resources/diameter-rf,resources/diameter-ro,resources/diameter-rx,resources/diameter-s6a,resources/diameter-s13,resources/diameter-sh-client,resources/diameter-sh-server" />
		</antcall>
	</target>

	<target name="build-ss7" description="">
		<antcall target="build-extra-package">
			<param name="package.name" value="ss7" />
			<param name="javadoc.dirs" value="resources/map,resources/cap,resources/tcap,resources/isup" />
		</antcall>
	</target>

	<target name="build-smpp" description="">
		<antcall target="build-extra-package">
			<param name="package.name" value="smpp" />
			<param name="javadoc.dirs" value="resources/smpp" />
		</antcall>
	</target>

	<target name="build-statistics" description="">
		<exec failonerror="true" executable="${mvn.executable}" dir="${packages.dir}/statistics">
			<arg line="install -Dmaven.test.skip=true -Drelease.dir=${release.dir} -Djboss.home=${wildfly.home} -Djboss.path=../../${wildfly.home.relative.path} -Pdeploy-DU" />
		</exec>

			<!-- export required for statistics RA -->
		<replace casesensitive="false" file="${wildfly.modules}/org/restcomm/slee/container/lib/main/module.xml">
			<replacetoken><![CDATA[<module name="sun.jdk"/>]]></replacetoken>
			<replacevalue><![CDATA[<module name="sun.jdk" export="true"/>]]></replacevalue>
		</replace>
	</target>
	
	<target name="build-javaee" description="">
		<antcall target="build-package">
			<param name="package.name" value="javaee" />
			<param name="javadoc.dirs" value="" />
		</antcall>
	</target>

	<target name="release-wildfly" depends="clean,get-wildfly,unzip-wildfly,setup-wildfly,get-extra,checkout-sources,
											build-core,build-resources,copy-asciidocs,build-sources-for-debug-zip">
		<tstamp>
			<format property="time.stamp" pattern="yyyyMMdd-HHmm" />
		</tstamp>
		<delete dir="." includes="${release.profile}-slee-${release.version}-wildfly-${wildfly.version}}.zip" />
		<antcall target="zip-wildfly">
			<param name="zip.filename" value="${release.profile}-slee-${release.version}-wildfly-${wildfly.version}.zip" />
			<param name="wildfly.home" value="${wildfly.home}" />
		</antcall>
		<!--<delete dir="${wildfly.home}" failonerror="true" />-->
		<!--<antcall target="clean" />-->
	</target>

	<target name="release-wildfly-core-only" depends="clean,get-wildfly,unzip-wildfly,setup-wildfly,checkout-core-sources,
											build-core,copy-core-asciidoc,build-sources-for-debug-zip">
		<tstamp>
			<format property="time.stamp" pattern="yyyyMMdd-HHmm" />
		</tstamp>
		<delete dir="." includes="${release.profile}-slee-${release.version}-wildfly-${wildfly.version}}.zip" />
		<antcall target="zip-wildfly">
			<param name="zip.filename" value="${release.profile}-slee-${release.version}-wildfly-${wildfly.version}.zip" />
			<param name="wildfly.home" value="${wildfly.home}" />
		</antcall>
		<!--<delete dir="${wildfly.home}" failonerror="true" />-->
		<!--<antcall target="clean" />-->
	</target>

    <target name="copy-asciidocs" depends="copy-core-asciidoc,copy-sip-asciidoc,copy-ss7-asciidoc,copy-smpp-asciidoc">
        <echo message="Copying AsciiDocs"/>
    </target>

    <target name="copy-core-asciidoc">
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/core/container/docs/sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="container" />
		</antcall>
    </target>

    <target name="copy-sip-asciidoc">
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/sip/resources/sip11/docs/sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="resources/sip11" />
		</antcall>
    </target>

    <target name="copy-ss7-asciidoc">
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/ss7/resources/cap/docs/sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="resources/cap" />
		</antcall>
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/ss7/resources/map/docs/sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="resources/map" />
		</antcall>
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/ss7/resources/tcap/docs/sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="resources/tcap" />
		</antcall>
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/ss7/resources/isup/docs/sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="resources/isup" />
		</antcall>
    </target>

	<target name="copy-smpp-asciidoc">
		<antcall target="copy-asciidoc">
			<param name="generated.docs"
				   value="${ant.file.restcomm.release}/../checkout/smpp/resources/smpp/smpp-server-ra-docs/smpp-server-ra-docs-sources-asciidoc/target/generated-docs" />
			<param name="docs.dir" value="resources/smpp" />
		</antcall>
    </target>

	<target name="copy-asciidoc">
		<copy todir="${release.dir}/docs/${docs.dir}/user-guide/html-book" failonerror="false">
			<fileset dir="${generated.docs}/html-book"/>
		</copy>
		<copy todir="${release.dir}/docs/${docs.dir}/user-guide/html-website" failonerror="false">
			<fileset dir="${generated.docs}/html-website"/>
		</copy>
		<copy todir="${release.dir}/docs/${docs.dir}/user-guide/pdf" failonerror="false">
			<fileset dir="${generated.docs}/pdf">
				<include name="**/*User_Guide.pdf"/>
			</fileset>
		</copy>
	</target>

	<target name="clean">
		<delete dir="${output.dir}" />
	</target>

	<target name="get-wildfly" unless="got.wildfly">
		<echo message="Downloading WildFly ${wildfly.version}"/>
		<get verbose="false" dest="${ant.file.restcomm.release}/../${wildfly.distro.zip.path}" src="https://github.com/wildfly/wildfly/releases/download/${wildfly.version}/wildfly-${wildfly.version}.zip" />
	</target>

	<target name="unzip-wildfly">
		<delete dir="${wildfly.home}" failonerror="true" />
		<unzip src="${wildfly.distro.zip.path}" dest="${release.dir}" />
	</target>

	<target name="setup-wildfly">
		<property name="wildfly.modules" value="${wildfly.home}/modules/system/layers/base/" />

		<!-- H2 database -->
		<echo message="Downloading last H2 database ${wildfly.version}"/>
		<mkdir dir="${tmp.wildfly.home}"/>
		<get verbose="false" dest="${tmp.wildfly.home}/${h2.distro.jar.path}" src="https://repo1.maven.org/maven2/com/h2database/h2/${h2.version}/h2-${h2.version}.jar" />

		<delete><fileset dir="${wildfly.modules}/com/h2database/h2/main/" includes="**/*.jar"/></delete>
		<copy file="${tmp.wildfly.home}/${h2.distro.jar.path}" todir="${wildfly.modules}/com/h2database/h2/main/"/>
		<replaceregexp file="${wildfly.modules}/com/h2database/h2/main/module.xml"
					   match="&lt;resource-root path=(.*)/&gt;"
					   replace="&lt;resource-root path=&quot;${h2.distro.jar.path}&quot;/&gt;"
					   byline="true"
		/>

		<replace casesensitive="false" file="${wildfly.home}/standalone/configuration/standalone.xml">
			<replacetoken><![CDATA[<connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>]]></replacetoken>
			<replacevalue><![CDATA[<connection-url>jdbc:h2:~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>]]></replacevalue>
		</replace>

		<!-- org.apache.commons.lang -->
		<replace casesensitive="false" file="${wildfly.modules}/org/apache/commons/lang/main/module.xml">
			<replacetoken><![CDATA[</dependencies>]]></replacetoken>
			<replacevalue><![CDATA[
		<module name="org.restcomm.slee.container.lib"/>
	</dependencies>]]>
			</replacevalue>
		</replace>

		<!-- adding of a security domain into standalone.xml -->
		<xmltask source="${wildfly.home}/standalone/configuration/standalone.xml" dest="${wildfly.home}/standalone/configuration/standalone.xml">
			<remove path="/:server/:profile/*[local-name()='subsystem']/*[local-name()='security-domains']/*[local-name()='security-domain' and @name='jmx-console']"/>
			<insert path="/:server/:profile/*[local-name()='subsystem']/*[local-name()='security-domains']/*[local-name()='security-domain'][last()]" position="after" file="template/security-domains.txt"/>
		</xmltask>

		<copy overwrite="true" todir="${wildfly.home}/standalone/configuration">
			<fileset dir="${basedir}/template">
				<include name="jmx-roles.properties" />
				<include name="jmx-users.properties" />
			</fileset>
		</copy>
	</target>

	<target name="get-extra" depends="get-diameter,unzip-diameter,get-ss7,unzip-ss7,setup-ss7,get-smppext,unzip-smppext,setup-smppext">
	</target>

	<available file="${ant.file.restcomm.release}/../${diameter.distro.zip.path}" property="got.diameter" />
	<target name="get-diameter" unless="got.diameter">
		<echo>Downloading Diameter</echo>
		<get dest="${ant.file.restcomm.release}/../${diameter.distro.zip.path}" src="${diameter.download.url}" />
	</target>

	<target name="unzip-diameter">
		<delete dir="${release.dir}/extra/restcomm-diameter" failonerror="true" />
		<unzip src="${diameter.distro.zip.path}" dest="${release.dir}/extra/restcomm-diameter" />
	</target>

	<available file="${ant.file.restcomm.release}/../${ss7.distro.zip.path}" property="got.ss7" />
	<target name="get-ss7" unless="got.ss7">
		<echo>Downloading SS7</echo>
		<get dest="${ant.file.restcomm.release}/../${ss7.distro.zip.path}" src="${ss7.download.url}" />
	</target>

	<target name="unzip-ss7">
		<delete dir="${release.dir}/extra/restcomm-ss7" failonerror="false" />
		<unzip src="${ss7.distro.zip.path}" dest="${release.dir}/extra/restcomm-ss7" />
	</target>

	<target name="setup-ss7">
		<property name="ss7.release.dir" value="${release.dir}/extra/restcomm-ss7/restcomm-jss7-${ss7.version}" />
        <delete dir="${ss7.release.dir}/ss7-jboss" failonerror="true" />
	</target>

	<available file="${ant.file.restcomm.release}/../${smppext.distro.zip.path}" property="got.smppext" />
	<target name="get-smppext" unless="got.smppext">
		<echo>Downloading SMPP Extensions</echo>
		<get dest="${ant.file.restcomm.release}/../${smppext.distro.zip.path}" src="${smppext.download.url}" />
	</target>

	<target name="unzip-smppext">
		<delete dir="${release.dir}/extra/restcomm-smpp-extensions" failonerror="true" />
		<unzip src="${smppext.distro.zip.path}" dest="${release.dir}/extra/restcomm-smpp-extensions" />
	</target>

	<target name="setup-smppext">
		<property name="smppext.release.dir"
				  value="${release.dir}/extra/restcomm-smpp-extensions/restcomm-smpp-extensions-${smppext.version}" />
		<delete dir="${smppext.release.dir}/jboss5" failonerror="true" />
	</target>
	
	<target name="checkout-sources">
		<echo>Checking out sources</echo>
		<delete dir="${packages.dir}" />
		<exec failonerror="true" executable="${mvn.executable}" dir="${ant.file.restcomm.release}/../">
			<!--<arg line="validate -Pcheckout -Dcheckout.basedir=${packages.dir} -Dcore.scmVersion=${jslee.version}" />-->
			<arg line="validate -Pcheckout -Dcheckout.basedir=${packages.dir} ${validate.versions}" />
		</exec>
	</target>

	<target name="checkout-core-sources">
		<echo>Checking out core sources</echo>
		<delete dir="${packages.dir}" />
		<exec failonerror="true" executable="${mvn.executable}" dir="${ant.file.restcomm.release}/../">
			<arg line="validate -Pcheckout-core -Dcheckout.basedir=${packages.dir} ${validate.versions}" />
		</exec>
	</target>

	<!-- zip sources for debug -->

	<target name="build-sources-for-debug-zip" depends="">
		<property name="debug.src.zip.filename" value="sources.zip" />
		<mkdir dir="${release.dir}/sources" />
		<for param="dir.name">
			<dirset dir="${ant.file.restcomm.release}/../checkout" includes="**/src/main/java" excludes="**/maven-archetypes/** **/management-console/**" />
			<sequential>
				<echo>Packaging debug src for @{dir.name}</echo>
				<copy todir="${release.dir}/sources" includeEmptyDirs="yes">
					<fileset dir="@{dir.name}" />
				</copy>
			</sequential>
		</for>
		<zip destfile="${release.dir}/${debug.src.zip.filename}" basedir="${release.dir}/sources" />
		<delete dir="${release.dir}/sources" />
	</target>

	<!-- zip release -->

	<target name="zip-wildfly" description="">
		<fixcrlf srcdir="${wildfly.home}/bin" includes="*.sh" eol="lf" eof="remove" />
        <chmod dir="${wildfly.home}/bin" perm="ugo+rx" includes="**/*.sh"/>
		<zip destfile="${ant.file.restcomm.release}/../${zip.filename}" filesonly="false">
			<zipfileset dir="${release.dir}" prefix="${release.profile}-slee-${release.version}-wildfly-${wildfly.version}" filemode="755" includes="**/*.sh" />
			<zipfileset dir="${release.dir}" prefix="${release.profile}-slee-${release.version}-wildfly-${wildfly.version}" excludes="**/*.sh" />
		</zip>
	</target>


</project>
